#include <stdint.h>
#define STB_IMAGE_IMPLEMENTATION
#define STB_IMAGE_WRITE_IMPLEMENTATION
#include <stb/stb_image.h>
#include <stb/stb_image_write.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <cuda.h>
#include "/home/user18/utilities/structcuda.hpp"
#include "/home/user18/utilities/perfcuda.hpp"

#define CHALLENS_IN 3
#define CHALLENS_OUT 1


__global__ void from_rgb_to_white(unsigned char *in, unsigned char *out, int width, int height){

    int i = blockDim.y * blockIdx.y + threadIdx.y;
    int j = blockDim.x * blockIdx.x + threadIdx.x;
    int linear_index = i * width + j ;
    if( i >= height || j >= width)
        return ;
    
    uint8_t r =  in[ CHALLENS_IN * linear_index ] ;
    uint8_t g =  in[ CHALLENS_IN * linear_index + 1] ;
    uint8_t b =  in[ CHALLENS_IN * linear_index + 2] ;
    out[i * width + j] = 0.21f*r + 0.71f*g + 0.07f*b;

}

int main(int argc, char const *argv[]){

    char const* name_image_in = argv[1];
    char const* name_image_out = "out_image.jpg";
    if(argc >= 3)
        name_image_out = argv[2];

    printf("Name of image in input -> %s\n", name_image_in);
    printf("Name of image out input -> %s\n", name_image_out);

    int width, height, bpp;
    
    // Host array
    uint8_t* h_in = stbi_load(name_image_in, &width, &height, &bpp, CHALLENS_IN);
    int size = width * height * CHALLENS_IN * sizeof(uint8_t) ;
    uint8_t* h_out = (uint8_t*) malloc( size );

    // Device array
    unsigned char* d_in ;
    unsigned char* d_out ;

    cudaMalloc((void **) &d_in, size);
    cudaMalloc((void **) &d_out, size);

    cudaMemcpy(d_in, h_in, size, cudaMemcpyHostToDevice);

    // Defining block_size and number_of_blocks
    cudaDeviceProp dev_prop;
    cudaGetDeviceProperties(&dev_prop, 0);
    info_2D info_2Dp;
    info_2Dp.width = width ;
    info_2Dp.height = height ;
    define_infostr_2D(&dev_prop, &info_2Dp);

    // Information
    OPTION_PRINT option_print[1]={OCCUPANCY_OPTION} ;
    print_info_2D(&info_2Dp, option_print , 1);

    from_rgb_to_white<<<info_2Dp.grid_dim,info_2Dp.block_dim>>>(d_in, d_out, width, height);

    cudaMemcpy(h_out, d_out, size, cudaMemcpyDeviceToHost);

    stbi_write_jpg(name_image_out, width, height, CHALLENS_OUT, h_out, width*CHALLENS_OUT);

    stbi_image_free(h_in);
    stbi_image_free(h_out);
    cudaFree(d_in);
    cudaFree(d_out);
    
    return 0 ;
}
